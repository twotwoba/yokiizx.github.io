<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Design Mode - 标签 - Hello World</title>
        <link>http://localhost:1313/tags/design-mode/</link>
        <description>Design Mode - 标签 - Hello World</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ericyuanovo@gmail.com (EricYuan)</managingEditor>
            <webMaster>ericyuanovo@gmail.com (EricYuan)</webMaster><lastBuildDate>Thu, 29 Sep 2022 17:19:13 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/tags/design-mode/" rel="self" type="application/rss+xml" /><item>
    <title>观察者和发布订阅</title>
    <link>http://localhost:1313/%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
    <pubDate>Thu, 29 Sep 2022 17:19:13 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/%E8%A7%82%E5%AF%9F%E8%80%85%E5%92%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
    <description><![CDATA[在前端领域，这两个设计模式，有着很多的应用，必须熟练掌握。
观察者模式在 promsie A+ 实现时，我们初始化了两个数组 &ndash; onFulfilledCb 和 onRejectedCb，它们用来收集依赖，当 promise 注册了多个 then 且因为 promise 是可能进行时，就把 onFulfilled 函数加入 onFulfilledCb 中，当得到 resolve 的通知后，再去通知执行。
这个过程其实就是一个简单的观察者模式。这里被观察者是: promise，观察者是: 两个队列里的回调函数，promise 的 resolve 通知回调执行。 两者的关系是通过 被观察者 建立起来的，被观察者有添加，删除和通知观察者的功能。
// 简单实现一下 class Subject { constructor() { this.subs = [] } addObserver(observer) { this.subs.push(observer) } removeObserver(observer) { const rmIndex = this.subs.findIndex((ob) =&gt; ob.id === observer.id ) &gt;&gt;&gt; 0 this.subs.splice(rmIndex,1) } notify(message) { this.subs.forEach(ob =&gt; ob.notified(message)) } } class Observer { constructor(id, name, subject) { this.]]></description>
</item></channel>
</rss>
