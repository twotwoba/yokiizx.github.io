<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>DOM - 标签 - Hello World</title>
        <link>http://localhost:1313/tags/dom/</link>
        <description>DOM - 标签 - Hello World</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ericyuanovo@gmail.com (EricYuan)</managingEditor>
            <webMaster>ericyuanovo@gmail.com (EricYuan)</webMaster><lastBuildDate>Sat, 24 Sep 2022 11:28:25 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/tags/dom/" rel="self" type="application/rss+xml" /><item>
    <title>容易混淆的API</title>
    <link>http://localhost:1313/%E5%AE%B9%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84api/</link>
    <pubDate>Sat, 24 Sep 2022 11:28:25 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/%E5%AE%B9%E6%98%93%E6%B7%B7%E6%B7%86%E7%9A%84api/</guid>
    <description><![CDATA[getElement VS querySelector 性质不同 getElementsBy* 是动态的， 类似于引用类型，若之后 dom 发生了改变，则已获取到的 dom 也会相应改变 querySelectorAll 是静态的，类似于快照的意思，获取后就不会再变了 html
&lt;div class=&#34;demo&#34;&gt;First div&lt;/div&gt; &lt;script&gt; let divs1 = document.getElementsByTagName(&#39;div&#39;) let divs2 = document.querySelectorAll(&#39;div&#39;) console.info(divs1.length) // 1 console.info(divs2.length) // 1 &lt;/script&gt; &lt;div class=&#34;demo&#34;&gt;Second div&lt;/div&gt; &lt;script&gt; console.info(divs1.length) // 2 console.info(divs2.length) // 1 console.log(document.getElementsByClassName(&#39;demo&#39;)) console.log(document.querySelectorAll(&#39;.demo&#39;)) &lt;/script&gt; 返回值不同 getElementsBy* 返回的是 HTMLCollection querySelectorAll 返回值是 NodeList HTMLCollection 比 NodeList 多了个 namedItem(name) 方法，根据 name 属性获取 dom NodeList 相比 HTMLCollection 多了更多的信息，比如注释，文本等
navigator | location | history]]></description>
</item><item>
    <title>被忽略的一些API</title>
    <link>http://localhost:1313/%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84api/</link>
    <pubDate>Sat, 24 Sep 2022 11:26:53 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84api/</guid>
    <description><![CDATA[MutationObserver监测 DOM，发生变动时触发。
js
const observer = new MutationObserver(callback) // callback 回调参数是 MutationRecord 对象 的数组，第二个参数是观察器自身 observer.observe(node, config) // node 为观察节点 // config 是对观察节点的一系列配置 // 详细见 https://zh.javascript.info/mutation-observer observe.disconnect() // 注销观察 observer.takeRecords() // 获取已经发生但未处理的变动 重要特性：
MutationObserver 是异步的，等待所有脚本任务完成后才会运行，也就是说当节点有多次变动，它是在最后才执行一次 Callback 把所有变动装进一个数组中处理，而不是一条条地个别处理 DOM 变动 IntersectionObserver监听元素是否进入了视口(viewport)。
js
// callback 一般会触发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。 var io = new IntersectionObserver(callback, option) // callback 参数是 IntersectionObserverEntry 对象 的数组，观察了几个元素就有几个对象 // 开始观察 io.observe(document.getElementById(&#39;example&#39;)) // 停止观察 io.unobserve(element) // 关闭观察器 io.disconnect() 比过往监听 scroll，然后 getBoundingClientRect 的优势：
scroll 事件密集发生，IntersectionObserver 没有大量计算 不会引起重绘回流 适合场景比如图片懒加载，无线滚动等，但是如果需要 buffer 好像就不行了。]]></description>
</item><item>
    <title>页面生命周期</title>
    <link>http://localhost:1313/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
    <pubDate>Fri, 23 Sep 2022 23:15:16 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
    <description><![CDATA[ 生命周期事件 DOMContentLoaded，完全加载 HTML，但 img、style 等外部资源还未完成 load，把 img、style 等外部资源也加载完成 beforeunload，正在离开 unload，几乎已经离开，常用来处理不涉及延迟的操作，比如发送分析数据 注意：
DOMContentLoaded 是 document 上的事件，其他三个是 window 上的事件 DOMContentLoaded 只能用 DOM2 事件addEventListener来监听 DOMContentLoaded 必须在脚本执行完成后再执行（具有async和document.createElement('script')动态创建的脚本不会阻塞） 发送分析数据：
js
// 以 post 请求方式发送 // 数据大小限制在 64kb // 一般是一个字符序列化对象 const analyticsData = { /* 带有收集的数据的对象 */ }; window.addEventListener(&#34;unload&#34;, function() { navigator.sendBeacon(&#34;/analytics&#34;, JSON.stringify(analyticsData)); }) ]]></description>
</item><item>
    <title>JS关于DOM部分(事件)</title>
    <link>http://localhost:1313/js%E5%85%B3%E4%BA%8Edom%E9%83%A8%E5%88%862/</link>
    <pubDate>Tue, 20 Sep 2022 21:51:51 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/js%E5%85%B3%E4%BA%8Edom%E9%83%A8%E5%88%862/</guid>
    <description><![CDATA[浏览器事件当事件发生时，浏览器会创建一个 event 对象，将详细信息放入其中，并将其作为参数传递给处理程序。 每个处理程序都可以访问 event 对象的属性：
event.target —— 引发事件的层级最深的元素。 event.currentTarget —— 处理事件的当前元素（具有处理程序的元素） event.eventPhase —— 当前阶段（capturing=1，target=2，bubbling=3）。 DOM0 和 DOM2 事件模型有三种事件绑定方式：
行内绑定，利用 html 属性，onclick=&quot;...&quot; 动态绑定，利用 dom 属性，dom.onclick = function 方法, addEventListener，dom.addEventListener(event, handler[, option]，一定记得清除。 其中前三种属于 DOM0 级，第三种属于 DOM2 级。option 若为 Boolean 值，true 表示捕获阶段触发，false 为冒泡阶段触发。
区别： DOM0 只绑定一个执行程序，如果设置多个会被覆盖。 DOM2 可以绑定多个，不会覆盖，依次执行。
DOM2 有三个阶段：
捕获阶段 处于目标阶段 冒泡阶段 对于同一个元素不区分冒泡还是捕获，按照绑定顺序执行 阻止事件冒泡，e.stopPropgation(); 阻止默认行为，e.preventDefault()
如果一个元素在一个事件上有多个处理程序，即使其中一个停止冒泡，其他处理程序仍会执行。 换句话说，event.stopPropagation() 停止向上移动，但是当前元素上的其他处理程序都会继续运行。 有一个 event.stopImmediatePropagation() 方法，可以用于停止冒泡，并阻止当前元素上的处理程序运行。使用该方法之后，其他处理程序就不会被执行。
DOM3 在 DOM2 的基础上添加了更多事件类型。
事件委托 (react 旧版本中的事件处理方式)利用冒泡机制。
一个好用的 api：const ancestor = dom.]]></description>
</item><item>
    <title>JS关于DOM部分(元素)</title>
    <link>http://localhost:1313/js%E5%85%B3%E4%BA%8Edom%E9%83%A8%E5%88%86/</link>
    <pubDate>Tue, 20 Sep 2022 17:06:54 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/js%E5%85%B3%E4%BA%8Edom%E9%83%A8%E5%88%86/</guid>
    <description><![CDATA[DOM 的大小 box-sizingcontent-box | border-box 控制 css 中 width 设置的是 content 还是 content + padding（根据属性名很容易区分）。
文字会溢出到padding-bottom
offsetTop/offsetLeft offsetParentoffsetParent: 获取最近的祖先：
position 为 absolute，relative 或 fixed 或 body 或 table, th, td offsetTop/offsetLeft： 元素带 border 相对于最近的祖先偏移距离
offsetWidth/offsetHeight包含 boder 的完整大小
clientTop/clientLeftcontent 相对于 border 外侧的宽度
当系统为阿拉伯语滚动条在左侧时，client 就变成了 border-left + 滚动条的宽度
clientWidth/clientHeightcontent + padding 的宽度，不包括滚动条
scrollTop/scrollLeft元素超出 contentHeight/conentWidth 的部分
scrollWidth/scrollHeight元素实际的宽高
滚动 js
scrollBy(x,y) // 相对自身偏移 scrollTo(pageX,pageY) // 滚动到绝对坐标 scrollToView() // 滚到视野里 常用的操作 判断是否触底（无限加载之类）：offsetHeight + scrollTop &gt;= scollHeight 判断是否进入可视区域（懒加载图片之类）：offsetTop &lt; clientHeight + scrollTop 坐标 clientX/clientY 相对于窗口 pageX/pageY 相对于文档 一个 API dom.]]></description>
</item></channel>
</rss>
