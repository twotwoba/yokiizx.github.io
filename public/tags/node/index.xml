<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Node - 标签 - Hello World</title>
        <link>http://localhost:1313/tags/node/</link>
        <description>Node - 标签 - Hello World</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ericyuanovo@gmail.com (EricYuan)</managingEditor>
            <webMaster>ericyuanovo@gmail.com (EricYuan)</webMaster><lastBuildDate>Mon, 26 Sep 2022 21:22:27 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/tags/node/" rel="self" type="application/rss+xml" /><item>
    <title>Event Loop</title>
    <link>http://localhost:1313/eventloop/</link>
    <pubDate>Mon, 26 Sep 2022 21:22:27 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/eventloop/</guid>
    <description><![CDATA[事件循环是 JavaScript 中很重要的概念，对于初学者，更是应该牢牢掌握，不然对一个程序的执行顺序都不清楚，还怎么在代码的世界里遨游呢？🔥
单线程的 JavaScriptJavaScript 设计之初就是单线程的，因为要用来操作 DOM，假如一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，浏览器就 😳 了。
HTML5 新增了 Web Worker，但完全受控于主线程，不能操作 I/O,DOM，协助大量计算倒是很优秀，本质上还是单线程。
代码执行如下图，JS 内存模型分为三种，栈空间，堆空间和代码执行空间。基本类型数据和引用类型数据的指针存储在栈中，引用类型数据存储在堆中 之前作用域的文章里提到过三个上下文，全局上下文，函数上下文，eval 上下文。当代码执行的时候需要一个栈来存储各个上下文的，这样才能保证后进入的上下文先执行结束（这里的后是指内部的嵌套函数）。
js
// ... // 代码扫描到此处时，执行上下文栈栈底有个全局上下文 function a() { // 函数a创建执行上下文,并推入栈中 function b() { // 函数b创建执行上下文,并推入栈中 console.log(&#39;hello world&#39;) // 在b的上下文中,打印字符串 } // b 结束, 弹出栈, 把控制权交给了 a } // a也执行完毕, 弹出栈, 交给后续的 所以当内部有 n 个函数嵌套的时候，栈就会爆，递归的死循环就是这么搞出来的。
同步任务按照上面的路子走的很顺，但是异步任务怎么办呢？就一直等吗，等到天荒地老？那是不可能的，我 JavaScript，永不阻塞！
异步任务不会进入主线程，而是被加入了一个任务队列，当主线程的同步任务跑完了，异步任务可以执行的时候再通知主线程来执行它。
浏览器的事件循环一个&lt;script&gt;可以看成是一个宏任务，可以这么理解：
txt
主线程： ┌─────────────────────────────────────────────────────────────────────────┐ │ sync code | sync code | sync code | sync code .]]></description>
</item><item>
    <title>V8垃圾回收机制</title>
    <link>http://localhost:1313/v8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Sun, 25 Sep 2022 23:42:56 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/v8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[这部分的阅读资料非常多，整理了下面几个文章，有空常看看。对主要内容做了简单的整理。
引用计数和标记清除 引用计数就是判断对象被引用的次数，为 0 时回收，大于 0 就不回收。 缺点: 对象循环引用的时候，就会产生不被回收的情况，从而造成内存泄露。比如：
js
function fn () { const obj1 = {} const obj2 = {} obj1.a = obj2 obj2.a = obj1 } fn() 标记清除将可达对象标记起来，不可达的对象当垃圾回收。 什么是可达，其实就是树，根节点是全局对象，从根开始向下搜索子节点，在这个树上的能被搜索到就是可达的。
JS 内存管理垃圾回收不仅仅是上面的两个算法。
JS 中内存的流程：分配内存 &ndash;&gt; 使用内存 &ndash;&gt; 释放内存。
基础类型：分配固定内存的大小，值存在 栈内存 中 引用类型：分配内存大小不固定，指针存在 栈内存中，指向 堆内存 中的对象，通过引用来访问 栈内存存储的基础类型大小固定，所以栈内存都是 操作系统自动分配和释放回收的
堆内存存储的引用类型的大小不固定，所以需要 JS 引擎来手动释放。
chrome 限制了 V8 内存使用大小64 位约 1.4G/1464MB ， 32 位约 0.7G/732MB
之所以做这个限制:
是因为浏览器上没有大内存的场景， 是因为 V8 的垃圾回收机制的限制 &ndash; 清理大量的内存会非常消耗时间，会阻塞单线程的 JS，性能和体验直线下降 V8 回收算法JS 中对象存活周期有两种，短期和长期的，一个对象经过了多次垃圾回收机制它还存在那就变成长期的了，如果对这种明知收不掉还每次都去做回收的动作就很消耗性能。]]></description>
</item><item>
    <title>Node基础</title>
    <link>http://localhost:1313/node%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Tue, 20 Sep 2022 18:15:40 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/node%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[Node.js 中文网。Node 有大量的 api，关键时刻还是得查文档，但是一些常用的基础的东西还是得牢记的。
path常用属性：
path.sep：Windows 下返回 \，POSIX 下返回 &lsquo;/&rsquo; path.delimiter：Windows 下返回 ;， POSIX 下返回 : 常用方法：
path.basename(),dirname(),extname() 返回 path 的对应部分 path.parse(path)，解析路径，获取对应元信息对象 path.format(parseObject)，parse 的反操作 path.normalize(path)，标准化，解析其中的 . 和 .. path.join(path1,path2,&hellip;)，把路径拼接并且标准化 path.resolve(path1,path2,&hellip;)，将路径或路径片段的序列解析为绝对路径 path.relative(from, to)，返回 from 到 to 的相对路径 events所有触发事件的对象都是 EventEmitter 类的实例
EventEmitter.on(eventname, listener)
listener 为普通函数，内部 this 指向 EventEmitter 实例，箭头函数则指向空对象 使用 setImmediate(MDN 非标准) 和 process.nextTick() 让其变成异步 process.nextTick 和 setImmediate 的区别
js
const EventEmitter = require(&#39;events&#39;); const event = new EventEmitter() event.on(&#39;demo&#39;, (a, b) =&gt; { console.]]></description>
</item></channel>
</rss>
