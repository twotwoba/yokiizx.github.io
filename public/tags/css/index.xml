<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CSS - 标签 - Hello World</title>
        <link>http://localhost:1313/tags/css/</link>
        <description>CSS - 标签 - Hello World</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ericyuanovo@gmail.com (EricYuan)</managingEditor>
            <webMaster>ericyuanovo@gmail.com (EricYuan)</webMaster><lastBuildDate>Tue, 27 Sep 2022 17:21:29 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/tags/css/" rel="self" type="application/rss+xml" /><item>
    <title>经典三栏布局</title>
    <link>http://localhost:1313/%E7%BB%8F%E5%85%B8%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</link>
    <pubDate>Tue, 27 Sep 2022 17:21:29 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/%E7%BB%8F%E5%85%B8%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</guid>
    <description><![CDATA[学习 BFC 时，知道利用 BFC 特性，可以制作两栏自适应布局，这里复习一下经典的三栏布局吧。
圣杯布局重点就是利用 container 的 padding 来给杯壁空间。
关键代码如下：
&lt;style&gt; /* padding 留下空位 */ .container { width: 100%; height: 100%; padding: 0 200px; box-sizing: border-box; } /* 中间设置100%宽度 */ .m { width: 100%; height: 100%; background-color: red; word-break: break-all; } /* 左右设置固定宽度 */ .l, .r { width: 200px; height: 100%; background-color: yellowgreen; } /* 脱离文档流 确定定位 */ .l, .r, .m { position: relative; float: left; } /* 左右偏移到占位 */ .]]></description>
</item><item>
    <title>层叠上下文(SC)</title>
    <link>http://localhost:1313/sc/</link>
    <pubDate>Tue, 27 Sep 2022 17:11:07 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/sc/</guid>
    <description><![CDATA[层叠顺序DOM 发生重叠在垂直方向上的显示顺序：
从最低到最高实际上是 装饰-&gt;布局-&gt;内容 的变化，比如内联才比浮动的高。
注意，background/border 是必须层叠上下文的，普通元素的会高于负 z-index 的。 z-index:0 与 z-index:auto 的层叠等级一样，但是层叠上下文有根本性的差异。
层叠上下文层叠上下文，英文全称（stacking context）。相比普通的元素，级别更高，离人更近。
特性 层叠上下文的层叠水平要比普通元素高 层叠上下文可以阻断元素的混合模式(isolation: isolate) 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中 创建 根 html position 为 relative/absolute/fixed 且具有 z-index 为数值的元素 目前 chrome 单独 position: fixed 也会变成层叠上下文 父 display: flex/inline-flex，具有 z-index 为数值的子元素(注意是子元素) opacity 不为 1 transform 不为 none filter 不为 none 其他 css3 属性，见下方张鑫旭大佬的博客。 层叠等级同一个层叠上下文中，元素在垂直方向的显示顺序。
所有元素都有层叠等级，普通元素的层叠等级由所在的层叠上下文决定，否则无意义。
规则 谁大谁上：在同一个层叠上下文领域，层叠等级值大的那一个覆盖小的那一个。 后来居上：当元素的层叠等级一致、层叠顺序相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。 一道经典题改动下方代码，让方框内显示红色。
&lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;head&gt; &lt;meta charset=&#34;UTF-8&#34; /&gt; &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34; /&gt; &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.]]></description>
</item><item>
    <title>块级格式化上下文(BFC)</title>
    <link>http://localhost:1313/bfc/</link>
    <pubDate>Tue, 27 Sep 2022 17:11:00 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/bfc/</guid>
    <description><![CDATA[块级格式化上下文，英文全称（Block Formatting Context）。
其实我个人的理解呢，就是独立的容器，是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及与其他元素的关系和相互作用。
创建 BFC常见的：
根 html position: absolute/fixed display: flex/inline-flex/inline-block/grid/inline-grid float 不为 none overflow 不为 visible 和 clip 最新见 MDN
BFC 特性 同一个 BFC 内的元素 上下 margin 会发生重叠 BFC 元素会计算子浮动元素的高度 BFC 元素不会被兄弟浮动元素覆盖 对于特性 1，可以把 margin 重叠的元素分别放入不同的 BFC 下即可
利用特性 2，可以清除浮动
利用特性 3，可以做自适应两栏布局]]></description>
</item><item>
    <title>flex</title>
    <link>http://localhost:1313/flex/</link>
    <pubDate>Tue, 27 Sep 2022 17:10:53 &#43;0800</pubDate><author>
        <name>EricYuan</name>
    </author><guid>http://localhost:1313/flex/</guid>
    <description><![CDATA[flex 是 css 界的宠儿，基础的就不记录了，直接参考Flex 布局教程：语法篇
主要记录下需要注意的地方。
上下文影响 flex 会让元素变成 BFC 会让具有 z-index 且值不为 auto 的子元素成为 SC align-items 和 align-content align-items 针对 单行，作用于行内所有盒子的对齐行为 align-content 针对 多行，对于 flex-wrap: no-wrap 无效，作用于行的对齐行为 flex 的计算flex 能完美自适应大小，是因为有一套计算逻辑，学习一下。
/* grow shrink basis */ /* 1 1 0 */ flex: 1; /* 1 1 auto */ flex: auto; /* 0 0 auto */ flex: none; 涉及到计算的比较重要的属性是 flex-basis，表示分配空间之前，占据主轴的空间大小，auto 表示为元素本身的大小。 flex-basis 为百分比时，会忽略自身的 width 来计算空间。
下面说下大致的计算过程：
得到剩余空间 = 总空间 - 确定的空间 得到需要分配的数量 = flex-grow 为 1 的盒子数量 得到单位空间大小 = 剩余空间 / 分配数量 得到最终长度 = 单位空间 * 分配数量 + 原来的长度 &lt;div class=&#34;wrap&#34;&gt; &lt;div class=&#34;item-1&#34;&gt;&lt;/div&gt; &lt;div class=&#34;item-2&#34;&gt;&lt;/div&gt; &lt;div class=&#34;item-3&#34;&gt;&lt;/div&gt; &lt;/div&gt; &lt;style&gt; .]]></description>
</item></channel>
</rss>
